name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*


jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          # (required) GitHub token for creating GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install libdbus-1-dev and pkg-config (Linux)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev pkg-config
      - name: Setup pnet dependencies (Windows)
        if: matrix.target == 'x86_64-pc-windows-msvc'
        shell: pwsh
        run: |
          $npcapSdkUrl = "https://nmap.org/npcap/dist/npcap-sdk-1.15.zip"
          $sdkZip = "npcap-sdk-1.15.zip"
          $sdkExtractPath = "C:\NpcapSdkTemp"
          Write-Host "Downloading Npcap SDK from $npcapSdkUrl..."
          Invoke-WebRequest -Uri $npcapSdkUrl -OutFile $sdkZip
          
          Write-Host "Extracting Npcap SDK to $sdkExtractPath..."
          Expand-Archive -Path $sdkZip -DestinationPath $sdkExtractPath -Force
          $projectLibDir = Join-Path $env:GITHUB_WORKSPACE "lib"
          if ( -not (Test-Path $projectLibDir) ) {
              New-Item -ItemType Directory -Path $projectLibDir
          }

          $packetLibSource = Join-Path $sdkExtractPath "Lib\x64\Packet.lib"
          $packetLibDestination = Join-Path $projectLibDir "Packet.lib"
          if (Test-Path $packetLibSource) {
              Write-Host "Copying $packetLibSource to $packetLibDestination..."
              Copy-Item -Path $packetLibSource -Destination $packetLibDestination
          } else {
              Write-Error "Error: Packet.lib not found at $packetLibSource. Please check Npcap SDK structure."
              exit 1
          }
          # echo "INCLUDE=$env:INCLUDE;$sdkExtractPath\WpdPack\Include" | Out-File -FilePath $GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Npcap SDK setup complete for pnet."
          Write-Host "Verifying files in $projectRoot..."
          Get-ChildItem -Recurse $projectRoot | Select-Object FullName, Name, Psalms | Format-Table -AutoSize
          Get-ChildItem -Path $projectLibDir -Recurse | Select-Object FullName, Name 
          Write-Host "Npcap SDK setup complete for pnet."
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          # (required) Comma-separated list of binary names (non-extension portion of filename) to build and upload.
          # Note that glob pattern is not supported yet.
          bin: ntpuvpn-rs
          # (optional) Target triple, default is host triple.
          # This is optional but it is recommended that this always be set to
          # clarify which target you are building for if macOS is included in
          # the matrix because GitHub Actions changed the default architecture
          # of macos-latest since macos-14.
          target: ${{ matrix.target }}
          # (optional) On which platform to distribute the `.tar.gz` file.
          # [default value: unix]
          # [possible values: all, unix, windows, none]
          tar: unix
          # (optional) On which platform to distribute the `.zip` file.
          # [default value: windows]
          # [possible values: all, unix, windows, none]
          zip: windows
          # (required) GitHub token for uploading assets to GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}
